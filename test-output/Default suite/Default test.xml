<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="DESKTOP-FEL46G5" ignored="0" name="Default test" tests="3" failures="0" timestamp="10 Sep 2020 05:03:54 GMT" time="9.346" errors="0">
  <testcase name="@BeforeMethod before" time="8.312" classname="testScripts.Module1">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at frameworkLibrary.ReportLibrary.reportEvent(ReportLibrary.java:72)
at applicationPages.Pg102_Home.clickOnMyInfo(Pg102_Home.java:26)
at testScripts.Module1.before(Module1.java:31)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:523)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeMethod before -->
  <testcase name="@AfterMethod after" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- @AfterMethod after -->
  <testcase name="@AfterMethod aftermethod" time="0.0" classname="frameworkLibrary.BaseClass">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase name="@BeforeMethod beforemethod" time="0.0" classname="frameworkLibrary.BaseClass">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase name="@BeforeMethod before" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase name="@AfterMethod after" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- @AfterMethod after -->
  <testcase name="@AfterMethod aftermethod" time="0.0" classname="frameworkLibrary.BaseClass">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase name="@BeforeMethod beforemethod" time="0.0" classname="frameworkLibrary.BaseClass">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase name="@BeforeMethod before" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase name="@AfterMethod after" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- @AfterMethod after -->
  <testcase name="@AfterMethod aftermethod" time="0.0" classname="frameworkLibrary.BaseClass">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase name="TC101" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- TC101 -->
  <testcase name="TC101" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- TC101 -->
  <testcase name="TC102" time="0.0" classname="testScripts.Module1">
    <skipped/>
  </testcase> <!-- TC102 -->
</testsuite> <!-- Default test -->
